# Generated by Django 3.2.9 on 2021-11-21 11:33
import json
import logging
import datetime
from pathlib import Path

import django.contrib.gis.db.models.fields
from django.contrib.gis.geos import Point
from django.db import migrations, models

import django.contrib.postgres.fields.citext
from django.contrib.postgres.operations import CITextExtension
from django.db import migrations, models, ProgrammingError
import django.db.models.deletion

from iot.models import id_from_name

logger = logging.getLogger(__name__)


def load_data(apps, schema_editor):
    Device2 = apps.get_model('iot', 'Device2')
    Theme = apps.get_model('iot', 'Theme')
    Type2 = apps.get_model('iot', 'Type2')
    Person2 = apps.get_model('iot', 'Person2')

    with open(Path(__file__).parent / 'data' / 'person.json') as f:
        people = {
            person['id']: Person2(
                name=person['name'],
                email=person['email'],
                telephone='06123456789',
                organisation='Gemeente Amsterdam',
                website='amsterdam.nl',
            )
            for person in json.load(f)
        }
        Person2.objects.bulk_create(people.values())

    Theme.objects.all().delete()
    Theme.objects.bulk_create([
        Theme(name='Afval'),
        Theme(name='Bewakings- en/of beveiligingscamera'),
        Theme(name='Bouwen en verbouwen'),
        Theme(name='Dienstensector'),
        Theme(name='Energie'),
        Theme(name='Geluid'),
        Theme(name='Gezondheid'),
        Theme(name='ICT / Netwerken'),
        Theme(name='Inkoop en beheer'),
        Theme(name='Klimaatverandering'),
        Theme(name='Landbouw'),
        Theme(name='Luchtvaart'),
        Theme(name='Markttoezicht'),
        Theme(name='Natuur- en landschapsbeheer'),
        Theme(name='Ondernemen'),
        Theme(name='Openbaar vervoer'),
        Theme(name='Railverkeer'),
        Theme(name='Scheepvaart'),
        Theme(name='Stoffen'),
        Theme(name='Water, bodem, lucht'),
        Theme(name='Wegverkeer - voet'),
        Theme(name='Wegverkeer - fiets'),
        Theme(name='Wegverkeer - auto'),
    ])

    with open(Path(__file__).parent / 'data' / 'owners.json') as f:
        owners = {device['id']: device['owner_id'] for device in json.load(f)}

    with open(Path(__file__).parent / 'data' / 'data.json') as f:

        theme_mapping = {
            "Luchtkwaliteit": Theme.objects.get(id=id_from_name(Theme, "Gezondheid")),
            "Voertuigdetectiemeetlus": Theme.objects.get(id=id_from_name(Theme, "Wegverkeer - auto")),
            "Observatiecamera": Theme.objects.get(id=id_from_name(Theme, "Bewakings- en/of beveiligingscamera")),
            "3D objectherkenning": Theme.objects.get(id=id_from_name(Theme, "Wegverkeer - auto")),
        }

        type_mapping = {
            "Luchtkwaliteit": Type2.objects.get(id=id_from_name(Type2, 'Klimaatsensor')),
            "Voertuigdetectiemeetlus": Type2.objects.get(id=id_from_name(Type2, 'Aanwezigheid of nabijheidsensor')),
            "Observatiecamera": Type2.objects.get(id=id_from_name(Type2, 'Optische / camera sensor')),
            "3D objectherkenning": Type2.objects.get(id=id_from_name(Type2, 'Aanwezigheid of nabijheidsensor')),
        }

        for i, device in enumerate(json.load(f)):
            if device['types']:
                device_inst = Device2(
                    reference=device['reference'] + '.' + str(i),
                    owner=people[owners[device['id']]],
                    type=type_mapping[device['types'][0]['name']],
                    location=Point(*map(float, device['geometrie'].values())),
                    datastream=device['types'][0]['name'],
                    contains_pi_data=False,
                    observation_goal=device['types'][0]['name'],
                    active_until=datetime.date(2050, 1, 1),
                )
                device_inst.save()
                device_inst.themes.add(theme_mapping[device['types'][0]['name']])


class Migration(migrations.Migration):

    dependencies = [
        ('iot', '0010_alter_person2_website'),
    ]

    operations = [
        migrations.RunPython(load_data),
    ]
