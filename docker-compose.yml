version: "3.5"

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1400

x-app: &base-app
  build:
    context: .
    target: app
  depends_on:
    - database
  environment: &base-app-env
    SECRET_KEY: "insecure"
    ADMIN_ENABLED: "true"
    API_ENABLED: "true"
    DEBUG: "true"
    PYTHONBREAKPOINT:
    SENTRY_DSN:
    OIDC_RP_CLIENT_ID:
    OIDC_RP_CLIENT_SECRET:
  volumes:
    - ./src:/app/src
    - ./tests:/app/tests
    - ./deploy:/app/deploy
  entrypoint: /app/deploy/wait-for-it.sh database:5432 --

volumes:
  db_data:

services:
  database:
    image: amsterdam/postgres11
    environment:
      POSTGRES_DB: dev
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      PGDATA: /data
    volumes:
      - db_data:/data

  app: &app
    <<: *base-app
    build:
      context: .
      target: app
    image: ${REGISTRY:-localhost:5001}/${REPOSITORY:-sensorenregister/api}:${VERSION:-latest}
    command: /app/deploy/docker-run.sh
    environment:
      <<: *base-app-env
      # DEBUG: "false"

  dev:
    <<: *base-app
    image: ${REGISTRY:-localhost:5001}/${REPOSITORY:-sensorenregister/api-dev}:${VERSION:-latest}
    build:
      context: .
      target: dev
    command: "./manage.py runserver 0.0.0.0:8000"

  test:
    <<: *base-app
    image: ${REGISTRY:-localhost:5001}/${REPOSITORY:-sensorenregister/api-test}:${VERSION:-latest}
    build:
      context: .
      target: tests
    environment:
      <<: *base-app-env
      DJANGO_SETTINGS_MODULE: "iot.settings.settings"
      OIDC_RP_CLIENT_ID: tests
      OIDC_RP_CLIENT_SECRET: tests
