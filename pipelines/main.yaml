resources:
  repositories:
    - repository: templates
      type: git
      name: mobiliteit/templates
      ref: main

trigger:
  batch: true
  branches:
    include:
      - main
  tags:
    include:
      - "*.*.*"

variables:
  # Debugging
  System.Debug: false

stages:
  - stage: build
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job: build
        variables:
          registry: mainweuacroyh7oqq4sbyjt.azurecr.io
        steps:
          #################################################
          # Set some variables to be used later
          #################################################
          - task: AzureCLI@2
            displayName: Set variables
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $agentIpAddress=$(dig TXT +short o-o.myaddr.l.google.com `@ns1.google.com | tr -d '"')
                echo "The (MS-hosted) agent has ipv4: $agentIpAddress\n"
                echo "##vso[task.setvariable variable=agentIpAddress;]$($agentIpAddress)"

          - task: AzureCLI@2
            displayName: Add agent IP to firewall
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az acr network-rule `
                  add -n mainweuacroyh7oqq4sbyjt `
                  --ip-address $(agentIpAddress)

          # - task: DockerInstaller@0
          #   inputs:
          #     dockerVersion: "20.10.21"

          - task: AzureCLI@2
            displayName: "Build"
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                make build

          - task: AzureCLI@2
            condition: eq(variables['Build.Reason'], 'PullRequest')
            displayName: "QA - tests"
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                make test

          - task: AzureCLI@2
            displayName: "ACR Login"
            retryCountOnTaskFailure: 10
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az acr login -n mainweuacroyh7oqq4sbyjt

          - task: AzureCLI@2
            displayName: "build"
            env:
              REGISTRY: mainweuacroyh7oqq4sbyjt.azurecr.io
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                # Build numer
                VERSION=$(Build.BuildId) make push

                # Git hash
                VERSION=$(Build.SourceVersion) make push

                # Branch name / Tag name
                VERSION=$(Build.SourceBranchName) make push

          - task: AzureCLI@2
            displayName: Remove agent ip from firewall
            condition: always()
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az acr network-rule `
                  remove -n mainweuacroyh7oqq4sbyjt `
                  --ip-address $(agentIpAddress)
  - stage: deploy
    pool: TAMM
    jobs:
      - job: deploy
        steps:
          - task: Kubernetes@1
            retryCountOnTaskFailure: 10
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceEndpoint: "SCN-K8S-O-SSR"
              namespace: "ns-ccc-ssr-ont-01-sensorenregister"
              command: "get"
              arguments: "deploy,svc,ingress,configmap,secrets,job,cronjob,networkpolicy,secretproviderclass"

          - task: Kubernetes@1
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceEndpoint: "SCN-K8S-O-SSR"
              namespace: "ns-ccc-ssr-ont-01-sensorenregister"
              command: "delete"
              arguments: "-l generator=kustomize deploy,svc,ingress,configmap,secrets,job,cronjob,networkpolicy,secretproviderclass"

          # - task: Kubernetes@1
          #   inputs:
          #     connectionType: "Kubernetes Service Connection"
          #     kubernetesServiceEndpoint: "SCN-K8S-O-SSR"
          #     namespace: "ns-ccc-ssr-ont-01-sensorenregister"
          #     command: "delete"
          #     arguments: "-l app=sensorenregister,env=dev,team=TAMM deploy,svc,ingress,configmap,secrets,job,cronjob,networkpolicy,secretproviderclass"

          - task: AzureCLI@2
            displayName: "Generate manifests"
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                pushd manifests/overlays/dev
                kustomize edit set image localhost:5000/sensorenregister/api=mainweuacroyh7oqq4sbyjt.azurecr.io/sensorenregister/api-dev:manifests

                kustomize edit set namespace ns-ccc-ssr-ont-01-sensorenregister
                kustomize build > generated.yaml
                cat generated.yaml
                popd

          - task: Kubernetes@1
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceEndpoint: "SCN-K8S-O-SSR"
              namespace: "ns-ccc-ssr-ont-01-sensorenregister"
              command: "apply"
              arguments: "-f manifests/overlays/dev/generated.yaml"

          - task: Kubernetes@1
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceEndpoint: "SCN-K8S-O-SSR"
              namespace: "ns-ccc-ssr-ont-01-sensorenregister"
              command: "get"
              arguments: "all"

          - task: Kubernetes@1
            displayName: "Login to Kubernetes Cluster"
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceEndpoint: "SCN-K8S-O-SSR"
              namespace: "ns-ccc-ssr-ont-01-sensorenregister"
              command: login
              # useClusterAdmin: true

          - task: AzureCLI@2
            displayName: "Set a default namespace"
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                kubectl config set-context deploy --namespace=ns-ccc-ssr-ont-01-sensorenregister
                kubectl config use-context deploy
                kubectl config view

          - task: AzureCLI@2
            displayName: "describe all"
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |

                for i in {1..10}; do 
                  echo "----------------------------------------------------------"
                  kubectl get all; 
                  sleep 1; 
                done
                kubectl describe all

          - task: AzureCLI@2
            displayName: "ingress"
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                kubectl get ingress
                kubectl describe ingress

          - task: AzureCLI@2
            displayName: "networkpolicy"
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                kubectl get NetworkPolicy.projectcalico
                kubectl describe NetworkPolicy.projectcalico

          - task: AzureCLI@2
            displayName: "secrets"
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                kubectl get secrets
                kubectl describe secrets

          - task: AzureCLI@2
            displayName: "app logs"
            inputs:
              azureSubscription: "ARM-CCC-SSR-ont-01"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                kubectl logs deploy/app
